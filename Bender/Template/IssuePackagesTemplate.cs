//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bender.Template {
    using Bender.Data.Supplying;
    using Bender.Data;
    using Bender.Template;
    using System;
    
    
    public partial class IssuePackagesTemplate : IssuePackagesTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
 foreach(var package in _packages) { 
            
            #line default
            #line hidden
            
            #line 7 ""
            this.Write("<h3>");
            
            #line default
            #line hidden
            
            #line 7 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( package.Reaction.Subject ));
            
            #line default
            #line hidden
            
            #line 7 ""
            this.Write("</h3>\r\n");
            
            #line default
            #line hidden
            
            #line 8 ""
 if (!string.IsNullOrEmpty(package.Reaction.Recommendations))
{ 
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write("<h4>");
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( package.Reaction.Recommendations ?? "" ));
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write("</h4>\r\n");
            
            #line default
            #line hidden
            
            #line 11 ""
 } 
            
            #line default
            #line hidden
            
            #line 12 ""
 if (package.Properties.ContainsKey("Jql"))
{ 
            
            #line default
            #line hidden
            
            #line 14 ""
            this.Write("<br>\r\n<a href=\"");
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(
	new JiraRest.UriBuilder()
		.SetRoot(_rootUri)
		.AddRelativePath("issues/")
		.AddParam("jql", package.Properties["Jql"], true)
		.Build()
		.ToString()
		.Replace("\"", "%22")
    ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("\">JQL</a>\r\n<br>\r\n");
            
            #line default
            #line hidden
            
            #line 25 ""
 }
else
{ 
            
            #line default
            #line hidden
            
            #line 28 ""
            this.Write("<!– Meta for issues from structure, not implemented yet –>\r\n");
            
            #line default
            #line hidden
            
            #line 29 ""
 } 
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(@"<table width=""100%"" border=""1"" cellspacing=""0"" cellpadding=""4"">
	<tr align=""center"" bgcolor=""#999999"">
		<td>Type</td>
		<td>Key</td>
		<td>Summary</td>
		<td>Assignee</td>
		<td>Reporter</td>
		<td>Status</td>
		<td>Priority</td>
		<td>Components</td>
		<td>Labels</td>
		<td>Time Spent (hrs)</td>
		<td>Build Found</td>
		<td>Build Fixed</td>
		<td>Due Date</td>
		<td>Created</td>
	</tr>
");
            
            #line default
            #line hidden
            
            #line 47 ""
 foreach(var issue in package.Items) { 
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write("\t<tr>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Type ?? "" ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("</td>\r\n\t\t<td><a href=\"");
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( new JiraRest.UriBuilder().SetRoot(_rootUri).AddRelativePath($"browse/{issue.Key ?? ""}").Build() ));
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write("\">");
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Key ?? "" ));
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write("</a></td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Summary ?? "" ));
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( (issue.Staff.Assignee ?? new User { DisplayName = "UNASSIGNED" }).DisplayName ?? "" ));
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( (issue.Staff.Reporter ?? new User { DisplayName = "UNKNOWN" }).DisplayName ?? "" ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Status ?? "" ));
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Priority ?? "" ));
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Components ?? "" ));
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.Labels ?? "" ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.TimeSpent.TotalHours ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( string.Join(", ", issue.BuildFound) ));
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( string.Join(", ", issue.BuildFixed) ));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.DueDate != null ? issue.DueDate.Value.ToString("dd.MM.yyyy") : "" ));
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write("</td>\r\n\t\t<td>");
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( issue.CreatedDate.ToString("dd.MM.yyyy") ));
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write("</td>\r\n\t</tr>\r\n");
            
            #line default
            #line hidden
            
            #line 64 ""
 } 
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write("</table>\r\n");
            
            #line default
            #line hidden
            
            #line 66 ""
 } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class IssuePackagesTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
